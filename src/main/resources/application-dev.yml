info:
  appName: spring-boot-gwt-sample-dev
server:
  port: 8080
  compression:
    enabled: true
    min-response-size: 1024
    mime-types: text/html,text/xml,text/plain,text/css,text/javascript,application/json,application/xml,application/javascript,image/png
  undertow:
    io-threads: 16
    # 阻塞任务线程池, 当执行类似servlet请求阻塞IO操作, undertow会从这个线程池中取得线程
    # 它的值设置取决于系统线程执行任务的阻塞系数，默认值是IO线程数*8
    worker-threads: 256
    # 以下的配置会影响buffer,这些buffer会用于服务器连接的IO操作,有点类似netty的池化内存管理
    # 每块buffer的空间大小,越小的空间被利用越充分，不要设置太大，以免影响其他应用，合适即可
    buffer-size: 1024
    # 每个区分配的buffer数量 , 所以pool的大小是buffer-size * buffers-per-region
    buffers-per-region: 1024
    # 是否分配的直接内存(NIO直接分配的堆外内存)
    direct-buffers: true
spring:
  datasource:
    driver-class-name: com.mysql.cj.jdbc.Driver
    url: jdbc:mysql://localhost:3306/spring-boot-sample?characterEncoding=utf-8&useSSL=false
    username: root
    password: root
    hikari:
      maxLifetime: 1765000
      maximumPoolSize: 15
  jpa:
    hibernate:
      ddl-auto: update
    show-sql: true
    database-platform: org.hibernate.dialect.MySQL5InnoDBDialect
  thymeleaf:
    cache: false
  devtools:
    restart:
      enabled: true
logging:
  pattern:
    console: "%clr(%d{MM/dd HH:mm:ss.SSS}){faint} %clr(%-5level) %clr(${PID:- }){magenta} %clr([%thread]){faint} %clr(---){faint} %cyan([%logger{50}.%method\\(%line\\)]) - %msg%n"
    file: "%clr(%d{MM/dd HH:mm:ss.SSS}){faint} %clr(%-5level) %clr(${PID:- }){magenta} %clr([%thread]){faint} %clr(---){faint} %cyan([%logger{50}.%method\\(%line\\)]) - %msg%n"
  level:
    ROOT: info
  file:
    name: ../temp/spring-boot-gwt-sample.log